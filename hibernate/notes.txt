Two types of access

Field based and property based

Annotations can be applied on field or getters
Default is field based

If @Id is present on field then entire class is field based else its property based

It can be explicitly mentioned using @Access(AccessType.FIELD)

for property mention AccessType.PROPERTY
still we can assign FIELD to select variables

ex:

@Access(AccessType.FIELD)
class Passenger {
@Id
private int id

@Access(AccessType.PROPERTY)
public String getName() {
    return name;
}
}

field based: easy to read, no need to expose getters

primary key:
simple or composite

rule for composite
public, no args constr, serializable, override equals and hashcode


generatedvalue is only for simple primary key
can be applied to field or property

Default is eager fetching. so all related entities are loaded from db
good to specify fetch type as lazy for -to-one relations
onetoone and manytoone is eager
onetomany and manytomany is lazy

dont use CascadeType.REMOVE or ALL

Prefer using Set instead of List for many to many relationship

Use @Fetch(FetchMode.SUBSELECT) to prevent n+1 queries problem
lets say we have 5 passengers and each passenger has 5 tickets.
when we fetch the passengers, it will execute 6 queries
1 query to fetch all passengers and 5 queries to get tickets for each passengers
if we use above annotation then it uses only 2 queries

If we want to fetch all passengers and their tickets in just one query
then use join fetch on custom query in interface

@Query("select distinct p from passengers p join fetch p.tickets")
List<Passengers> findAll();


Relations

uni and bidirectional

Many part is always the owning side
owning side drive the updates

@OneToMany, ManyToOne, OneToOne, ManyToMany

@JonTable, cross reference table for mapping relationship
its on the owning side of the relationship and receives parameters


JoinColumn

specifies column for joining an entity
takes a name parameter and referencedColumnName parameter


JoinColumns

mapping for composite foreign keys
groups @JoinColumn annotation


Embeddable classes

Fine grained classes representing the entity state
dont have persistent identity of their own
cannot be shared across persistent entities
exist only as part of the state of entity to which they belong
must be annotated as @Embeddable
can be customized using @AttributeOverride or @AttributeOverrides
in the main class add @Embedded for the field where above class has to be embedded

@ElementCollection
@CollectionTable

key and value can be either basic or embeddable class
@MapKeyColumn
@Column - specifies the column


Inheritance

@MappedSuperclass
They are not entities. they are not saved and queried

@AttributeOverride
@AssociationOverride

3 mapping strategies
1. single table per hierarchy
@Inheritance(strategy = SINGLE_TABLE)
All classes are mapped to single table
Discriminator column is used to identify subclass using DTYPE(varchar)
can be changed using @DiscriminatorColumn(name = "DISC", discriminatorType=CHAR)
good support for polymorphism
requires nullable columns
column of child entities should be nullable
if one entity has marked column as nonnullable and other entitie doesnt have any relationship to it
then inserting with null value is not possible

2. joined subclass
@Inheritance(strategy = JOINED)
fields specific to subclass are in separate table
classes are separate tables
join through primary key of super class which is FK of subclass
more joins are needed. may lead to bad performance
In our example, ticket_number, origin, price, destination are duplicated in both tables of subclass
The deeper the hierarchy, the more deeper the joins needed

3. table per concrete entity. no table for super class.
subclass has separate table
all properties of root class are mapped to columns of each subclass
poor support for polymorphism
lead to duplicate id's and columns between tables
no discriminator column

Annotation for above
@Inheritance
@DiscriminatorColumn
@DiscriminatorValue. only specified on concrete classes


use AttributeConverter between state to db column

Entity lifecycle

entitymanager is an interface to interact with persistence context
Entity states
new, managed, removed, detached, transient

persist(), remove(), merge(), find(), lock(), detach(), refresh()
when entity is loaded from db then they are in Managed state

persist
new -> managed
managed -> ignored
detached -> exception
removed -> managed


Merge
new -> new instance with same state
managed -> ignored, cascaded to reference entities
detached -> existing is loaded, state merged
removed -> illegalargumentexception

Remove
new -> ignored
managed -> removed
detached -> illegalargexception
removed -> ignored

Refresh

managed -> reloaded from db


commit -> end unit of work. no rollback

flush -> no commit, just synchronization

pre/post events

@PrePersist
@PostPersist
@PreUpdate
@PostUpdate
@PreRemove
@PostRemove
@PostLoad


OneToOne and ManyToOne is mapped using join column
onetomany and manytomany is mapped using join table (default)


onetoone by default has eager fetch

Preferable to use set for onetomany or manytomany


Query

JPQL uses object fields and not table/column names

select <clause>
from <clause>
[where | order by | group by | having]
<function avg, count max ,min sum>
<operators>

select b
from Book b
where b.unitCost > 100 // not b.unit_cost

where b.title like '%java%'(multi character wildcard) or '_java_'(single character wildcard)


Examples

select c from CD c
select b from Book b where lower(b.title) like '%java%'
positional parameters query can be used using ?1 ?2 and so on
query.setParameter(1, unitCost)

or

where b.publicationDate < :pubDate
query.setParameter("pubDate", LocalDate.now())

pagination

query.setMaxResults(10)

namedquery are defined on entity class using @NamedQuery or @NamedQueries
validated at app startup
multiple named queries are possible
@NamedQuery(name = Book.FINDALL, query = "select b from Book b")
@NamedQuery(name = "ExpensiveBooks", query = "select b from Book b where b.unitCost > 29")

// @NamedQuery(name = "<ENtity name>.someFunctionName", query = "... :coolname")
is equivalent to

interface repo extends Jpa<Entity name, Long> {
  someFunctionName(@Param("coolname")
}

Query query = em.createNamedQuery("ExpensiveBooks")
List books = query.getResultList()

Query dsl can begin with
findBy, queryBy, readBy, countBy, getBy, findFirst
it uses JPA attribute names for criteria

criterias can be combined with And Or

we can pass named parameters to @Query annotation using @Param
@Query(" :maxPrice")
func(@Param("maxPrice") BigDecimal maxPrice)

enhanced syntax
@Query(" like %?1")
func(String name)

use nativeQuery = true to run sql queries
this has vendor lockin

modifyable queries
@Modifying
@Query("update ...")


Query types

sql
jpql
query dsl


Entities -> NamedQuery and NamedNativeQuery
Jpa repository -> NamedQuery, NamedNativeQuery, Query, Query dsl

Many prefer to keep queries in Entity

Method with @Query have highest precedence
method that match a named or native named query
methods that follow query dsl keyword naming structure


Audit annotations

@CreatedBy, @LastModifiedBy, @CreatedDate and @LastModifiedDate
last two are automatically set

Implement AuditorAware interface

use @EnableJpaAuditing to enable auditing


Locking

Optimistic locking and pessimistic

@Lock(LockModeType.PESSIMISTIC_WRITE)


Database provides 3 types of date or time datatypes

datetime, date, time

mysql has timestamp which is different from time

3 value types

basic, composite and collection
